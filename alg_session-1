
# 1 задача
def second_max_digit(in_s: str) -> int:
    digits = [int(s) for s in in_s if s.isdigit()]
    if len(digits) < 2:
        return -1
    return digits[::-1][1]

second_max_digit('7shdb3bvhns2')

#  2 задача
def merge_interval(intervals):
    intervals.sort(key=lambda x: x[0])
    merged_intervals = [intervals[0]]
    new_interval = []

    for interval in intervals[1:]:
        if interval[0] <= merged_intervals[-1][1]:
            new_interval.append(interval[0])
            new_interval.append(max(merged_intervals[-1][1], interval[1]))
            return new_interval
        else:
            return []

in_intervals = [[1,3],[2,6],[8,10],[12,18]]
print(merge_interval(in_intervals))

# 3 задача

# имеем невзешенный граф.
# Для поиска кратчайшего пути применяю алгоритм поиска в ширину BFS.
# Исследую четыре возможных направления: влево, вправо, вверх, вниз
# После прохождения клетки ставлю в ней метку, чтобы не проходить клетку вновь.
from collections import deque

def shortest_path(grid):
    if not grid or grid[0][0] == 1:
        return -1

    rows, cols = len(grid), len(grid[0])
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Возможные движения (вправо, вниз, влево, вверх)
    queue = deque([(0, 0, 1)])  # Очередь для BFS, (x, y, шаги)
    visited = set((0, 0))

    while queue:
        x, y, steps = queue.popleft()

        # Если достигли цели
        if x == rows - 1 and y == cols - 1:
            return steps

        # Проходим по возможным направлениям
        for dx, dy in directions:
            nx, ny = x + dx, y + dy

            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited:
                queue.append((nx, ny, steps + 1))
                visited.add((nx, ny))

    return -1  # Если нет пути

# Пример использования
grid = [
 [0, 0, 1, 0, 0],
 [0, 0, 0, 1, 0],
 [1, 0, 1, 0, 0],
 [0, 0, 0, 0, 1],
 [0, 1, 0, 0, 0]
]
print(shortest_path(grid))

# from collections import deque
#
# def shortest_path(grid):
#     if not grid or grid[0][0] == 1:
#         return -1
#
#     rows, cols = len(grid), len(grid[0])
#     directions = [(0,1),(0,-1),(1,0),(0,-1)]
#
#     queue = deque[(0,0,1)]
#     visited = set((0,0))
#
#     while queue:
#         x, y, steps = queue.popleft()
#
#         if x == rows-1 and y == cols-1:
#             return steps
#         for dx, dy in directions:
#             nx, ny = x + dx, y + dy
#
#             if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited:
#                 queue.append((nx, ny, steps+1))
#                 visited.add((nx, ny))
#         return -1
#
# grid = [[0,0,1,0,0],
#           [0,0,0,1,0],
#           [1,0,1,0,0],
#           [0,0,0,0,1],
#           [0,1,0,0,0]]
#
# print(shortest_path(grid))
